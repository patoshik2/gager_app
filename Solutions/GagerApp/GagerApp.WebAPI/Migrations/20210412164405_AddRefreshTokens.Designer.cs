// <auto-generated />
using System;
using GagerApp.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GagerApp.WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210412164405_AddRefreshTokens")]
    partial class AddRefreshTokens
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogAdress", b =>
                {
                    b.Property<long>("IdAdress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_adress")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<string>("Burg")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("NumberDom")
                        .IsRequired()
                        .HasColumnName("Number_dom")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("NumberKvartira")
                        .HasColumnName("Number_kvartira")
                        .HasColumnType("int");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdAdress", "IdPartner")
                        .HasName("ID_adress");

                    b.HasIndex("IdPartner");

                    b.ToTable("Catalog_adress");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogBrigada", b =>
                {
                    b.Property<long>("IdBrigada")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_brigada")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("IdBrigada")
                        .HasName("ID_brigada");

                    b.ToTable("Catalog_brigada");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogCartClient", b =>
                {
                    b.Property<long>("IdCartClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_cart_client")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<long?>("IdCustomerDirectory")
                        .HasColumnName("ID_customer_directory")
                        .HasColumnType("bigint");

                    b.HasKey("IdCartClient")
                        .HasName("ID_cart_client");

                    b.HasIndex("IdCustomerDirectory")
                        .HasName("IX_Customer_directory__Catalog_cart_client");

                    b.ToTable("Catalog_cart_client");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogMatUsl", b =>
                {
                    b.Property<long>("IdCatalog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_catalog")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdTypeMatUsl")
                        .HasColumnName("ID_type_mat_usl")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUnits")
                        .HasColumnName("ID_units")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<DateTime>("LastClosingDate")
                        .HasColumnName("Last_closing_date")
                        .HasColumnType("datetime");

                    b.Property<string>("NameMatUsl")
                        .IsRequired()
                        .HasColumnName("Name_mat_usl")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<double>("Residual")
                        .HasColumnName("residual")
                        .HasColumnType("float");

                    b.HasKey("IdCatalog")
                        .HasName("ID_catalog");

                    b.HasIndex("IdTypeMatUsl")
                        .HasName("IX_Type_mat_usl__Catalog_mat_usl");

                    b.HasIndex("IdUnits")
                        .HasName("IX_Catalog_mat_usl__Units");

                    b.ToTable("Catalog_mat_usl");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogRoom", b =>
                {
                    b.Property<long>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_room")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdAdress")
                        .HasColumnName("ID_adress")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Blueprint")
                        .HasColumnType("image");

                    b.Property<long>("IdConstruct")
                        .HasColumnName("ID_construct")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdMontag")
                        .HasColumnName("ID_montag")
                        .HasColumnType("bigint");

                    b.Property<long>("IdZayavka")
                        .HasColumnName("ID_zayavka")
                        .HasColumnType("bigint");

                    b.Property<string>("NameRoom")
                        .IsRequired()
                        .HasColumnName("Name_room")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("IdRoom", "IdAdress", "IdPartner")
                        .HasName("ID_room");

                    b.HasIndex("IdConstruct")
                        .HasName("IX_Guide_room__Guide_vid_construct");

                    b.HasIndex("IdMontag")
                        .HasName("IX_Zayavka_montag__Catalog_room");

                    b.HasIndex("IdZayavka")
                        .HasName("IX_Zayavka_zamer__Catalog_room");

                    b.HasIndex("IdAdress", "IdPartner");

                    b.ToTable("Catalog_room");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogTelNumber", b =>
                {
                    b.Property<long>("IdNumberTel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_number_tel")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<string>("NumberTel")
                        .IsRequired()
                        .HasColumnName("Number_tel")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("IdNumberTel", "IdPartner")
                        .HasName("ID_number_tel");

                    b.HasIndex("IdPartner");

                    b.ToTable("Catalog_tel_number");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogVidConstruct", b =>
                {
                    b.Property<long>("IdConstruct")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_construct")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameConstruct")
                        .IsRequired()
                        .HasColumnName("Name_construct")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.HasKey("IdConstruct")
                        .HasName("ID_vid_construct");

                    b.ToTable("Catalog_vid_construct");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CountProducts", b =>
                {
                    b.Property<long>("IdCountProducts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_count_products")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdCatalog")
                        .HasColumnName("ID_catalog")
                        .HasColumnType("bigint");

                    b.Property<long>("IdMovementDoc")
                        .HasColumnName("ID_movement_doc")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("PriceMove")
                        .HasColumnName("Price_move")
                        .HasColumnType("float");

                    b.HasKey("IdCountProducts", "IdCatalog", "IdMovementDoc")
                        .HasName("ID_count_products");

                    b.HasIndex("IdCatalog");

                    b.HasIndex("IdMovementDoc");

                    b.ToTable("Count_products");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CounterpartyDirectory", b =>
                {
                    b.Property<long>("IdPartner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdCustomerDirectory")
                        .HasColumnName("ID_customer_directory")
                        .HasColumnType("bigint");

                    b.HasKey("IdPartner")
                        .HasName("ID_partner");

                    b.HasIndex("IdCustomerDirectory")
                        .HasName("IX_Customer_directory__Counterparty");

                    b.ToTable("Counterparty_directory");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CustomerDirectory", b =>
                {
                    b.Property<long>("IdCustomerDirectory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_customer_directory")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdDirectoryLegalEntities")
                        .HasColumnName("ID_Directory_legal_entities")
                        .HasColumnType("bigint");

                    b.Property<string>("NameClient")
                        .IsRequired()
                        .HasColumnName("Name_client")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PaternumClient")
                        .IsRequired()
                        .HasColumnName("Paternum_client")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SurnameClient")
                        .IsRequired()
                        .HasColumnName("Surname_client")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdCustomerDirectory")
                        .HasName("ID_customer_directory");

                    b.HasIndex("IdDirectoryLegalEntities")
                        .HasName("IX_Directory_ legal_entities__Customer");

                    b.ToTable("Customer_directory");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.DirectoryLegalEntities", b =>
                {
                    b.Property<long>("IdDirectoryLegalEntities")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Directory_legal_entities")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullNameCompany")
                        .IsRequired()
                        .HasColumnName("Full_name_company")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<int>("Inn")
                        .HasColumnType("int");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasColumnName("Name_company")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdDirectoryLegalEntities")
                        .HasName("ID_Directory_legal_entities");

                    b.HasIndex("IdPartner")
                        .HasName("IX_Counterparty_directory__Directory");

                    b.ToTable("Directory_ legal_entities");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.EMailCatalog", b =>
                {
                    b.Property<long>("IdEMailCatalog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_e-mail_catalog")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnName("E_mail")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdEMailCatalog", "IdPartner")
                        .HasName("ID_e-mail_catalog");

                    b.HasIndex("IdPartner");

                    b.ToTable("E-mail_catalog");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.EmployeeSalaryHandbook", b =>
                {
                    b.Property<long>("IdEmployeeSalaryHandbook")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_employee_salary_handbook")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateSalary")
                        .HasColumnName("Date_salary")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndSalary")
                        .HasColumnName("End_salary")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartSalary")
                        .HasColumnName("Start_salary")
                        .HasColumnType("datetime");

                    b.Property<double>("SumSalary")
                        .HasColumnName("Sum_salary")
                        .HasColumnType("float");

                    b.HasKey("IdEmployeeSalaryHandbook", "IdProfileWorker")
                        .HasName("ID_employee_salary_handbook");

                    b.HasIndex("IdProfileWorker");

                    b.ToTable("Employee_salary_handbook");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.GuideRol", b =>
                {
                    b.Property<long>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_rol")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameRol")
                        .IsRequired()
                        .HasColumnName("Name_rol")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdRol")
                        .HasName("ID_rol");

                    b.ToTable("Guide_rol");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.GuideStatusZamer", b =>
                {
                    b.Property<long>("IdStatusZamer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_status_zamer")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameStatusZamer")
                        .IsRequired()
                        .HasColumnName("Name_status_zamer")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("IdStatusZamer")
                        .HasName("ID_status_zamer");

                    b.ToTable("Guide_status_zamer");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.HiringWork", b =>
                {
                    b.Property<long>("IdRecruitment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_recruitment")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateDismissal")
                        .HasColumnName("Date_dismissal")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRecruitment")
                        .HasColumnName("Date_recruitment")
                        .HasColumnType("datetime");

                    b.Property<long>("IdJobPosition")
                        .HasColumnName("ID_job_position")
                        .HasColumnType("bigint");

                    b.HasKey("IdRecruitment", "IdProfileWorker")
                        .HasName("ID_recruitment");

                    b.HasIndex("IdJobPosition")
                        .HasName("IX_Hiring_work__Job_positions");

                    b.HasIndex("IdProfileWorker");

                    b.ToTable("Hiring_work");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.InstallationContracts", b =>
                {
                    b.Property<long>("IdInstallationContracts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_installation_contracts")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountMonths")
                        .HasColumnName("count_months")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInstallationContracts")
                        .HasColumnName("Date_Installation_contracts")
                        .HasColumnType("datetime");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("NumberContracts")
                        .HasColumnName("Number_contracts")
                        .HasColumnType("int");

                    b.Property<double>("SumForPay")
                        .HasColumnName("Sum_for_pay")
                        .HasColumnType("float");

                    b.Property<bool>("TipePay")
                        .HasColumnName("Tipe_pay")
                        .HasColumnType("bit");

                    b.HasKey("IdInstallationContracts")
                        .HasName("ID_installation_contracts");

                    b.ToTable("Installation_contracts");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.JobPositions", b =>
                {
                    b.Property<long>("IdJobPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_job_position")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("JobTitle")
                        .HasColumnName("Job_title")
                        .HasColumnType("bigint");

                    b.HasKey("IdJobPosition")
                        .HasName("ID_job_position");

                    b.ToTable("Job_positions");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.MovementGoods", b =>
                {
                    b.Property<long>("IdMovementDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_movement_doc")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDoc")
                        .HasColumnName("Date_doc")
                        .HasColumnType("datetime");

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberDoc")
                        .HasColumnName("number_doc")
                        .HasColumnType("int");

                    b.Property<bool>("TipeDoc")
                        .HasColumnName("Tipe_doc")
                        .HasColumnType("bit");

                    b.HasKey("IdMovementDoc")
                        .HasName("ID_movement_doc");

                    b.HasIndex("IdPartner")
                        .HasName("IX_Counterparty_directory__Movement_goods");

                    b.ToTable("Movement_goods");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PaymentSchedule", b =>
                {
                    b.Property<long>("IdPaymentSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_payment_schedule")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdInstallationContracts")
                        .HasColumnName("ID_installation_contracts")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DatePaymentSchedule")
                        .HasColumnName("Date_payment_schedule")
                        .HasColumnType("datetime");

                    b.Property<double>("SumPaymentSchedule")
                        .HasColumnName("Sum_payment_schedule")
                        .HasColumnType("float");

                    b.HasKey("IdPaymentSchedule", "IdInstallationContracts")
                        .HasName("ID_payment_schedule");

                    b.HasIndex("IdInstallationContracts");

                    b.ToTable("Payment_schedule");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PieceworkPayment", b =>
                {
                    b.Property<long>("IdPieceworkPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_piecework_payment")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndPiecework")
                        .HasColumnName("End_piecework")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartPiecework")
                        .HasColumnName("Start_piecework")
                        .HasColumnType("datetime");

                    b.Property<double>("SumPiecework")
                        .HasColumnName("Sum_piecework")
                        .HasColumnType("float");

                    b.HasKey("IdPieceworkPayment", "IdProfileWorker")
                        .HasName("ID_piecework_payment");

                    b.HasIndex("IdProfileWorker");

                    b.ToTable("Piecework_payment");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PositionSmeta", b =>
                {
                    b.Property<long>("IdPositionSmeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_position_smeta")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdRoom")
                        .HasColumnName("ID_room")
                        .HasColumnType("bigint");

                    b.Property<long>("IdAdress")
                        .HasColumnName("ID_adress")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCatalog")
                        .HasColumnName("ID_catalog")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<double>("Col")
                        .HasColumnType("float");

                    b.HasKey("IdPositionSmeta", "IdRoom", "IdAdress", "IdCatalog", "IdPartner")
                        .HasName("ID_position_smeta");

                    b.HasIndex("IdCatalog");

                    b.HasIndex("IdRoom", "IdAdress", "IdPartner");

                    b.ToTable("Position_smeta");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PriceMatUsl", b =>
                {
                    b.Property<long>("IdPriceMatUsl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_price_mat_usl")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdCatalog")
                        .HasColumnName("ID_catalog")
                        .HasColumnType("bigint");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.HasKey("IdPriceMatUsl", "IdCatalog")
                        .HasName("ID_price_mat_usl");

                    b.HasIndex("IdCatalog");

                    b.ToTable("Price_mat_usl");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PriceVidConstruct", b =>
                {
                    b.Property<long>("IdPriceVidConstruct")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_price_vid_construct")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdConstruct")
                        .HasColumnName("ID_construct")
                        .HasColumnType("bigint");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCost")
                        .HasColumnName("Date_cost")
                        .HasColumnType("date");

                    b.HasKey("IdPriceVidConstruct", "IdConstruct")
                        .HasName("ID_price_vid_construct");

                    b.HasIndex("IdConstruct");

                    b.ToTable("Price_vid_construct");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ProfileWorker", b =>
                {
                    b.Property<long>("IdProfileWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdBrigada")
                        .HasColumnName("ID_brigada")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTipeWorks")
                        .HasColumnName("ID_tipe_works")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Paternum")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdProfileWorker")
                        .HasName("ID_profile_worker");

                    b.HasIndex("IdBrigada")
                        .HasName("IX_Catalog_brigada__Profile_worker");

                    b.HasIndex("IdTipeWorks")
                        .HasName("IX_Tipe_works__Profile_worker");

                    b.ToTable("Profile_worker");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkerId")
                        .HasColumnType("bigint");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "WorkerId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ScheduleVacation", b =>
                {
                    b.Property<long>("IdScheduleVacation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_schedule_vacation")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<long>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.HasKey("IdScheduleVacation", "IdProfileWorker")
                        .HasName("ID_schedule_vacation");

                    b.HasIndex("IdProfileWorker");

                    b.ToTable("Schedule_vacation");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.SettlementsCounterparties", b =>
                {
                    b.Property<long>("SettlementsCounterparties1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Settlements_counterparties")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<bool>("ArrivalExpense")
                        .HasColumnName("Arrival_expense")
                        .HasColumnType("bit");

                    b.Property<bool>("CashPayment")
                        .HasColumnName("Cash_payment")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<long?>("IdInstallationContracts")
                        .HasColumnName("ID_installation_contracts")
                        .HasColumnType("bigint");

                    b.Property<double>("SumSettlementsCounterparties")
                        .HasColumnName("Sum_settlements_counterparties")
                        .HasColumnType("float");

                    b.HasKey("SettlementsCounterparties1", "IdPartner")
                        .HasName("ID_Settlements_counterparties");

                    b.HasIndex("IdInstallationContracts")
                        .HasName("IX_Settlements_counterparties_Installation");

                    b.HasIndex("IdPartner");

                    b.ToTable("Settlements_counterparties");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.Timesheet", b =>
                {
                    b.Property<long>("IdTimesheet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_timesheet")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimesheet")
                        .HasColumnName("Date_timesheet")
                        .HasColumnType("datetime");

                    b.Property<long?>("Hours")
                        .HasColumnType("bigint");

                    b.Property<long>("IdWorkCode")
                        .HasColumnName("ID_work_code")
                        .HasColumnType("bigint");

                    b.HasKey("IdTimesheet", "IdProfileWorker")
                        .HasName("ID_timesheet");

                    b.HasIndex("IdProfileWorker");

                    b.HasIndex("IdWorkCode")
                        .HasName("IX_Work_codes__Timesheet");

                    b.ToTable("Timesheet");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.TipeWorks", b =>
                {
                    b.Property<long>("IdTipeWorks")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_tipe_works")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameTipeWork")
                        .IsRequired()
                        .HasColumnName("Name_tipe_work")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IdTipeWorks")
                        .HasName("ID_tipe_works");

                    b.ToTable("Tipe_works");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.TypeMatUsl", b =>
                {
                    b.Property<long>("IdTypeMatUsl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_type_mat_usl")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("IdTypeMatUsl")
                        .HasName("ID_type_mat_usl");

                    b.ToTable("Type_mat_usl");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.Units", b =>
                {
                    b.Property<long>("IdUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_units")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsFloat")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdUnits")
                        .HasName("ID_units");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.UserProfile", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_user")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRol")
                        .HasColumnName("ID_rol")
                        .HasColumnType("bigint");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("IdUser", "IdProfileWorker")
                        .HasName("ID");

                    b.HasIndex("IdProfileWorker");

                    b.HasIndex("IdRol")
                        .HasName("IX_Guide_rol__User_profile");

                    b.ToTable("User_profile");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.WorkCodes", b =>
                {
                    b.Property<long>("IdWorkCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_work_code")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("IdWorkCode")
                        .HasName("ID_work_code");

                    b.ToTable("Work_codes");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ZayavkaMontag", b =>
                {
                    b.Property<long>("IdMontag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_montag")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateMontag")
                        .HasColumnName("Date_montag")
                        .HasColumnType("date");

                    b.Property<long>("IdAdress")
                        .HasColumnName("ID_adress")
                        .HasColumnType("bigint");

                    b.Property<long>("IdBrigada")
                        .HasColumnName("ID_brigada")
                        .HasColumnType("bigint");

                    b.Property<long>("IdInstallationContracts")
                        .HasColumnName("ID_installation_contracts")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TimeMontag")
                        .HasColumnName("Time_montag")
                        .HasColumnType("time");

                    b.HasKey("IdMontag")
                        .HasName("ID_montag");

                    b.HasIndex("IdBrigada")
                        .HasName("IX_Montag_to_Guide_brigada");

                    b.HasIndex("IdInstallationContracts")
                        .HasName("IX_Installation_contracts__Zayavka_montag");

                    b.HasIndex("IdAdress", "IdPartner")
                        .HasName("IX_Guide_adress__Zayavka_montag");

                    b.ToTable("Zayavka_montag");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ZayavkaZamer", b =>
                {
                    b.Property<long>("IdZayavka")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_zayavka")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateZamer")
                        .HasColumnName("Date_zamer")
                        .HasColumnType("date");

                    b.Property<long>("IdAdress")
                        .HasColumnName("ID_adress")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPartner")
                        .HasColumnName("ID_partner")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProfileWorker")
                        .HasColumnName("ID_profile_worker")
                        .HasColumnType("bigint");

                    b.Property<long>("IdStatusZamer")
                        .HasColumnName("ID_status_zamer")
                        .HasColumnType("bigint");

                    b.Property<string>("Notice")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<TimeSpan>("TimeStartZamer")
                        .HasColumnName("Time_start_zamer")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeStopZamer")
                        .HasColumnName("Time_stop_zamer")
                        .HasColumnType("time");

                    b.HasKey("IdZayavka")
                        .HasName("ID_zayavka");

                    b.HasIndex("IdPartner")
                        .HasName("IX_Counterparty_directory__Zayavka_zamer");

                    b.HasIndex("IdProfileWorker")
                        .HasName("IX_Profile_worker__Zayavka_zamer");

                    b.HasIndex("IdStatusZamer")
                        .HasName("IX_Zayavka_to_Guide_status_zamer");

                    b.HasIndex("IdAdress", "IdPartner")
                        .HasName("IX_Zayavka_to_Guide_adress");

                    b.ToTable("Zayavka_zamer");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogAdress", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("CatalogAdress")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Catalog_adress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogCartClient", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CustomerDirectory", "IdCustomerDirectoryNavigation")
                        .WithMany("CatalogCartClient")
                        .HasForeignKey("IdCustomerDirectory")
                        .HasConstraintName("Customer_directory__Catalog_cart_client");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogMatUsl", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.TypeMatUsl", "IdTypeMatUslNavigation")
                        .WithMany("CatalogMatUsl")
                        .HasForeignKey("IdTypeMatUsl")
                        .HasConstraintName("Type_mat_usl__Catalog_mat_usl")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.Units", "IdUnitsNavigation")
                        .WithMany("CatalogMatUsl")
                        .HasForeignKey("IdUnits")
                        .HasConstraintName("Catalog_mat_usl__Units")
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogRoom", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogVidConstruct", "IdConstructNavigation")
                        .WithMany("CatalogRoom")
                        .HasForeignKey("IdConstruct")
                        .HasConstraintName("Guide_room__Guide_vid_construct")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.ZayavkaMontag", "IdMontagNavigation")
                        .WithMany("CatalogRoom")
                        .HasForeignKey("IdMontag")
                        .HasConstraintName("Zayavka_montag__Catalog_room");

                    b.HasOne("GagerApp.WebAPI.Models.ZayavkaZamer", "IdZayavkaNavigation")
                        .WithMany("CatalogRoom")
                        .HasForeignKey("IdZayavka")
                        .HasConstraintName("Zayavka_zamer__Catalog_room")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.CatalogAdress", "Id")
                        .WithMany("CatalogRoom")
                        .HasForeignKey("IdAdress", "IdPartner")
                        .HasConstraintName("Guide_adress__Guide_room")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CatalogTelNumber", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("CatalogTelNumber")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Catalog_tel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CountProducts", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogMatUsl", "IdCatalogNavigation")
                        .WithMany("CountProducts")
                        .HasForeignKey("IdCatalog")
                        .HasConstraintName("Catalog_mat_usl__Count_products")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.MovementGoods", "IdMovementDocNavigation")
                        .WithMany("CountProducts")
                        .HasForeignKey("IdMovementDoc")
                        .HasConstraintName("Count_products__Movement_goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CounterpartyDirectory", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CustomerDirectory", "IdCustomerDirectoryNavigation")
                        .WithMany("CounterpartyDirectory")
                        .HasForeignKey("IdCustomerDirectory")
                        .HasConstraintName("Customer_directory__Counterparty");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.CustomerDirectory", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.DirectoryLegalEntities", "IdDirectoryLegalEntitiesNavigation")
                        .WithMany("CustomerDirectory")
                        .HasForeignKey("IdDirectoryLegalEntities")
                        .HasConstraintName("Directory_ legal_entities__Customer");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.DirectoryLegalEntities", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("DirectoryLegalEntities")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Directory");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.EMailCatalog", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("EMailCatalog")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__E-mail_catalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.EmployeeSalaryHandbook", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("EmployeeSalaryHandbook")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Employee_salary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.HiringWork", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.JobPositions", "IdJobPositionNavigation")
                        .WithMany("HiringWork")
                        .HasForeignKey("IdJobPosition")
                        .HasConstraintName("Hiring_work__Job_positions")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("HiringWork")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Hiring_work")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.MovementGoods", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("MovementGoods")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Movement_goods")
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PaymentSchedule", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.InstallationContracts", "IdInstallationContractsNavigation")
                        .WithMany("PaymentSchedule")
                        .HasForeignKey("IdInstallationContracts")
                        .HasConstraintName("Payment_schedule__Installation_contracts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PieceworkPayment", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("PieceworkPayment")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Piecework_payment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PositionSmeta", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogMatUsl", "IdCatalogNavigation")
                        .WithMany("PositionSmeta")
                        .HasForeignKey("IdCatalog")
                        .HasConstraintName("Position_smeta__Catalog_mat_usl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.CatalogRoom", "Id")
                        .WithMany("PositionSmeta")
                        .HasForeignKey("IdRoom", "IdAdress", "IdPartner")
                        .HasConstraintName("Guide_room__Position_smeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PriceMatUsl", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogMatUsl", "IdCatalogNavigation")
                        .WithMany("PriceMatUsl")
                        .HasForeignKey("IdCatalog")
                        .HasConstraintName("Catalog_mat_usl__Price_mat_usl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.PriceVidConstruct", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogVidConstruct", "IdConstructNavigation")
                        .WithMany("PriceVidConstruct")
                        .HasForeignKey("IdConstruct")
                        .HasConstraintName("Guide_vid_construct__Price_vid_construct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ProfileWorker", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogBrigada", "IdBrigadaNavigation")
                        .WithMany("ProfileWorker")
                        .HasForeignKey("IdBrigada")
                        .HasConstraintName("Catalog_brigada__Profile_worker");

                    b.HasOne("GagerApp.WebAPI.Models.TipeWorks", "IdTipeWorksNavigation")
                        .WithMany("ProfileWorker")
                        .HasForeignKey("IdTipeWorks")
                        .HasConstraintName("Tipe_works__Profile_worker")
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ScheduleVacation", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("ScheduleVacation")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Schedule_vacation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.SettlementsCounterparties", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.InstallationContracts", "IdInstallationContractsNavigation")
                        .WithMany("SettlementsCounterparties")
                        .HasForeignKey("IdInstallationContracts")
                        .HasConstraintName("Settlements_counterparties_Installation");

                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("SettlementsCounterparties")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Settlements")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.Timesheet", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("Timesheet")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Timesheet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.WorkCodes", "IdWorkCodeNavigation")
                        .WithMany("Timesheet")
                        .HasForeignKey("IdWorkCode")
                        .HasConstraintName("Work_codes__Timesheet")
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.UserProfile", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("UserProfile")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("User_profile__Profile_worker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.GuideRol", "IdRolNavigation")
                        .WithMany("UserProfile")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("Guide_rol__User_profile")
                        .IsRequired();
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ZayavkaMontag", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CatalogBrigada", "IdBrigadaNavigation")
                        .WithMany("ZayavkaMontag")
                        .HasForeignKey("IdBrigada")
                        .HasConstraintName("Montag_to_Guide_brigada")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.InstallationContracts", "IdInstallationContractsNavigation")
                        .WithMany("ZayavkaMontag")
                        .HasForeignKey("IdInstallationContracts")
                        .HasConstraintName("Installation_contracts__Zayavka_montag")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.CatalogAdress", "Id")
                        .WithMany("ZayavkaMontag")
                        .HasForeignKey("IdAdress", "IdPartner")
                        .HasConstraintName("Guide_adress__Zayavka_montag");
                });

            modelBuilder.Entity("GagerApp.WebAPI.Models.ZayavkaZamer", b =>
                {
                    b.HasOne("GagerApp.WebAPI.Models.CounterpartyDirectory", "IdPartnerNavigation")
                        .WithMany("ZayavkaZamer")
                        .HasForeignKey("IdPartner")
                        .HasConstraintName("Counterparty_directory__Zayavka_zamer")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.ProfileWorker", "IdProfileWorkerNavigation")
                        .WithMany("ZayavkaZamer")
                        .HasForeignKey("IdProfileWorker")
                        .HasConstraintName("Profile_worker__Zayavka_zamer")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.GuideStatusZamer", "IdStatusZamerNavigation")
                        .WithMany("ZayavkaZamer")
                        .HasForeignKey("IdStatusZamer")
                        .HasConstraintName("Zayavka_to_Guide_status_zamer")
                        .IsRequired();

                    b.HasOne("GagerApp.WebAPI.Models.CatalogAdress", "Id")
                        .WithMany("ZayavkaZamer")
                        .HasForeignKey("IdAdress", "IdPartner")
                        .HasConstraintName("Zayavka_to_Guide_adress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
